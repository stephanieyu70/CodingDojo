package com.au.Arrays;

public class Replicates {

    public static int[] getDuplicates(int[] inputArray) {
        List<Integer> inputArrayList = Arrays.stream(inputArray).boxed().collect(Collectors.toList());

        List<Integer> duplicateArrayList = new ArrayList<>();

        Map<Integer, Integer> duplicateFrequencyMap = new HashMap<>();

        inputArrayList.stream().filter(i -> Collections.frequency(inputArrayList, i) > 1)
                .collect(Collectors.toSet()).forEach(number -> duplicateArrayList.add(number));

        if (!duplicateArrayList.isEmpty()) {
            for (Integer duplicate : duplicateArrayList){
                Integer frequency = Collections.frequency(inputArrayList, duplicate);
                duplicateFrequencyMap.put(duplicate, frequency);
            }

            List<Integer> outputArrayList = new ArrayList<>();

            //Find the max frequency from the hash map then loop through the hashmap to populate the output array
            Integer maxFrequency = duplicateFrequencyMap.entrySet().stream().max(Map.Entry.comparingByValue()).get().getValue();

            duplicateFrequencyMap.entrySet().stream().filter(i -> i.getValue() == maxFrequency)
                    .collect(Collectors.toSet()).forEach(number -> outputArrayList.add(number.getKey()));

            int[] outputArray = new int[outputArrayList.size()];

            for (int i = 0; i < outputArrayList.size(); i++) {
                outputArray[i] = outputArrayList.get(i);
            }

            Arrays.sort(outputArray);

            return outputArray;
        }

        return inputArray;
    }
}
